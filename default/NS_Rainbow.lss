
NS_Rainbow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010c  0080010c  00000d5c  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000068  00000000  00000000  0000157b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001af  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000de4  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000047c  00000000  00000000  00002576  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ccd  00000000  00000000  000029f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000120  00000000  00000000  000036c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000300  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f74  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000009d  00000000  00000000  00004a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  00004af1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

#define USELED	64						// Using LED Value


int main(void)
{	
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	9c e9       	ldi	r25, 0x9C	; 156
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0xe>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x14>
  e2:	00 00       	nop
	*			                  -> NS-Rainbow_init(8, PB, 2);
	*
	****************************************************************************************************/

	_delay_ms(10);
	NS_Rainbow_init(USELED, PB, 0);
  e4:	80 e4       	ldi	r24, 0x40	; 64
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	68 e3       	ldi	r22, 0x38	; 56
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	0e 94 b0 02 	call	0x560	; 0x560 <NS_Rainbow_init>


	setBrightness(50); 	// 0,1(OFF) ~ 255
  f0:	82 e3       	ldi	r24, 0x32	; 50
  f2:	0e 94 3f 03 	call	0x67e	; 0x67e <setBrightness>
  f6:	eb c0       	rjmp	.+470    	; 0x2ce <main+0x200>
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
		{
			line = i * 8;
  f8:	f0 2e       	mov	r15, r16
  fa:	ff 0c       	add	r15, r15
  fc:	ff 0c       	add	r15, r15
  fe:	ff 0c       	add	r15, r15
			setColor(0 + line, 255, 0, 0);				// RED
 100:	8f 2d       	mov	r24, r15
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	6f ef       	ldi	r22, 0xFF	; 255
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	0e 94 93 01 	call	0x326	; 0x326 <setColor>
			setColor(1 + line, 255, 94, 0);				// Orange
 10e:	cf 2d       	mov	r28, r15
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	6f ef       	ldi	r22, 0xFF	; 255
 118:	4e e5       	ldi	r20, 0x5E	; 94
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	0e 94 93 01 	call	0x326	; 0x326 <setColor>
			setColor(2 + line, 255, 228, 0);			// Yellow
 120:	ce 01       	movw	r24, r28
 122:	02 96       	adiw	r24, 0x02	; 2
 124:	6f ef       	ldi	r22, 0xFF	; 255
 126:	44 ee       	ldi	r20, 0xE4	; 228
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	0e 94 93 01 	call	0x326	; 0x326 <setColor>
			setColor(3 + line, 29, 219, 22);			// Green
 12e:	ce 01       	movw	r24, r28
 130:	03 96       	adiw	r24, 0x03	; 3
 132:	6d e1       	ldi	r22, 0x1D	; 29
 134:	4b ed       	ldi	r20, 0xDB	; 219
 136:	26 e1       	ldi	r18, 0x16	; 22
 138:	0e 94 93 01 	call	0x326	; 0x326 <setColor>
			setColor(4 + line, 0, 0, 255);				// Blue
 13c:	ce 01       	movw	r24, r28
 13e:	04 96       	adiw	r24, 0x04	; 4
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	0e 94 93 01 	call	0x326	; 0x326 <setColor>
			setColor(5 + line, 1, 0, 255);				// Dark Blue
 14a:	ce 01       	movw	r24, r28
 14c:	05 96       	adiw	r24, 0x05	; 5
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	0e 94 93 01 	call	0x326	; 0x326 <setColor>
			setColor(6 + line, 63, 0, 153);				// Purple
 158:	ce 01       	movw	r24, r28
 15a:	06 96       	adiw	r24, 0x06	; 6
 15c:	6f e3       	ldi	r22, 0x3F	; 63
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	29 e9       	ldi	r18, 0x99	; 153
 162:	0e 94 93 01 	call	0x326	; 0x326 <setColor>
			setColor(7 + line, 255, 0, 221);			// Pink
 166:	ce 01       	movw	r24, r28
 168:	07 96       	adiw	r24, 0x07	; 7
 16a:	6f ef       	ldi	r22, 0xFF	; 255
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	2d ed       	ldi	r18, 0xDD	; 221
 170:	0e 94 93 01 	call	0x326	; 0x326 <setColor>

			show();
 174:	0e 94 54 02 	call	0x4a8	; 0x4a8 <show>
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	91 ee       	ldi	r25, 0xE1	; 225
 17c:	a4 e0       	ldi	r26, 0x04	; 4
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	a0 40       	sbci	r26, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0xb0>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0xba>
 188:	00 00       	nop
	while(1)
	{
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
 18a:	0f 5f       	subi	r16, 0xFF	; 255
 18c:	1f 4f       	sbci	r17, 0xFF	; 255
 18e:	08 30       	cpi	r16, 0x08	; 8
 190:	11 05       	cpc	r17, r1
 192:	0c f4       	brge	.+2      	; 0x196 <main+0xc8>
 194:	b1 cf       	rjmp	.-158    	; 0xf8 <main+0x2a>
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	99 e6       	ldi	r25, 0x69	; 105
 19a:	a8 e1       	ldi	r26, 0x18	; 24
 19c:	81 50       	subi	r24, 0x01	; 1
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	a0 40       	sbci	r26, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0xce>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xd8>
 1a6:	00 00       	nop
			_delay_ms(100);
		}		
		_delay_ms(500);


		for(int i = USELED; i >= 0; i--)
 1a8:	c0 e4       	ldi	r28, 0x40	; 64
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
		{
			cell_clear(i);
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 37 03 	call	0x66e	; 0x66e <cell_clear>
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	96 e7       	ldi	r25, 0x76	; 118
 1b6:	a1 e0       	ldi	r26, 0x01	; 1
 1b8:	81 50       	subi	r24, 0x01	; 1
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	a0 40       	sbci	r26, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0xea>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0xf4>
 1c2:	00 00       	nop
			_delay_ms(100);
		}		
		_delay_ms(500);


		for(int i = USELED; i >= 0; i--)
 1c4:	21 97       	sbiw	r28, 0x01	; 1
 1c6:	9f ef       	ldi	r25, 0xFF	; 255
 1c8:	cf 3f       	cpi	r28, 0xFF	; 255
 1ca:	d9 07       	cpc	r29, r25
 1cc:	79 f7       	brne	.-34     	; 0x1ac <main+0xde>
 1ce:	08 e3       	ldi	r16, 0x38	; 56
		}

		for(int i = 7; i >= 0; i--)
		{
			line = i * 8;
			setColor_RGB(0 + line, 0xFF0000);			// RED
 1d0:	80 2f       	mov	r24, r16
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	6f ef       	ldi	r22, 0xFF	; 255
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
			setColor_RGB(1 + line, 0xFF5E00);			// Orange
 1e0:	c0 2f       	mov	r28, r16
 1e2:	d0 e0       	ldi	r29, 0x00	; 0
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	5e e5       	ldi	r21, 0x5E	; 94
 1ec:	6f ef       	ldi	r22, 0xFF	; 255
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
			setColor_RGB(2 + line, 0xFFE400);			// Yellow
 1f4:	ce 01       	movw	r24, r28
 1f6:	02 96       	adiw	r24, 0x02	; 2
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	54 ee       	ldi	r21, 0xE4	; 228
 1fc:	6f ef       	ldi	r22, 0xFF	; 255
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
			setColor_RGB(3 + line, 0x1DDB16);			// Green
 204:	ce 01       	movw	r24, r28
 206:	03 96       	adiw	r24, 0x03	; 3
 208:	46 e1       	ldi	r20, 0x16	; 22
 20a:	5b ed       	ldi	r21, 0xDB	; 219
 20c:	6d e1       	ldi	r22, 0x1D	; 29
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
			setColor_RGB(4 + line, 0x0000FF);			// Blue
 214:	ce 01       	movw	r24, r28
 216:	04 96       	adiw	r24, 0x04	; 4
 218:	4f ef       	ldi	r20, 0xFF	; 255
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
			setColor_RGB(5 + line, 0x0100FF);			// Dark Blue
 224:	ce 01       	movw	r24, r28
 226:	05 96       	adiw	r24, 0x05	; 5
 228:	4f ef       	ldi	r20, 0xFF	; 255
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
			setColor_RGB(6 + line, 0x3F0099);			// Purple
 234:	ce 01       	movw	r24, r28
 236:	06 96       	adiw	r24, 0x06	; 6
 238:	49 e9       	ldi	r20, 0x99	; 153
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	6f e3       	ldi	r22, 0x3F	; 63
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
			setColor_RGB(7 + line, 0xFF00DD);			// Pink
 244:	ce 01       	movw	r24, r28
 246:	07 96       	adiw	r24, 0x07	; 7
 248:	4d ed       	ldi	r20, 0xDD	; 221
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	6f ef       	ldi	r22, 0xFF	; 255
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
		
			show();
 254:	0e 94 54 02 	call	0x4a8	; 0x4a8 <show>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	91 ee       	ldi	r25, 0xE1	; 225
 25c:	a4 e0       	ldi	r26, 0x04	; 4
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	a0 40       	sbci	r26, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <main+0x190>
 266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x19a>
 268:	00 00       	nop
 26a:	08 50       	subi	r16, 0x08	; 8
		{
			cell_clear(i);
			_delay_ms(30);
		}

		for(int i = 7; i >= 0; i--)
 26c:	08 3f       	cpi	r16, 0xF8	; 248
 26e:	09 f0       	breq	.+2      	; 0x272 <main+0x1a4>
 270:	af cf       	rjmp	.-162    	; 0x1d0 <main+0x102>
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	99 e6       	ldi	r25, 0x69	; 105
 276:	a8 e1       	ldi	r26, 0x18	; 24
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	a0 40       	sbci	r26, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x1aa>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x1b4>
 282:	00 00       	nop
			_delay_ms(100);
		}	
		_delay_ms(500);

	
		for(int i = 0; i <= USELED; i++)
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
		{
			cell_clear(i);
 288:	ce 01       	movw	r24, r28
 28a:	0e 94 37 03 	call	0x66e	; 0x66e <cell_clear>
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	96 e7       	ldi	r25, 0x76	; 118
 292:	a1 e0       	ldi	r26, 0x01	; 1
 294:	81 50       	subi	r24, 0x01	; 1
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	a0 40       	sbci	r26, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x1c6>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0x1d0>
 29e:	00 00       	nop
			_delay_ms(100);
		}	
		_delay_ms(500);

	
		for(int i = 0; i <= USELED; i++)
 2a0:	21 96       	adiw	r28, 0x01	; 1
 2a2:	c1 34       	cpi	r28, 0x41	; 65
 2a4:	d1 05       	cpc	r29, r1
 2a6:	81 f7       	brne	.-32     	; 0x288 <main+0x1ba>
			_delay_ms(30);
		}


		for(int i = 0; i < 2; i++)
			rainbow(10);
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 39 04 	call	0x872	; 0x872 <rainbow>
 2b0:	8a e0       	ldi	r24, 0x0A	; 10
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 39 04 	call	0x872	; 0x872 <rainbow>

		

		clear();
 2b8:	0e 94 27 03 	call	0x64e	; 0x64e <clear>
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	93 ed       	ldi	r25, 0xD3	; 211
 2c0:	a0 e3       	ldi	r26, 0x30	; 48
 2c2:	81 50       	subi	r24, 0x01	; 1
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	a0 40       	sbci	r26, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0x1f4>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x1fe>
 2cc:	00 00       	nop
	while(1)
	{
		/* Example Program */
		/* This example is for Rainbow Matrix */

		for(int i = 0; i < 8; i++)
 2ce:	00 e0       	ldi	r16, 0x00	; 0
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	5d cf       	rjmp	.-326    	; 0x18e <main+0xc0>

000002d4 <rst_delay>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d4:	87 ec       	ldi	r24, 0xC7	; 199
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <rst_delay+0x4>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <rst_delay+0xa>
 2de:	00 00       	nop

volatile uint8_t *port;
volatile uint8_t maskPin;
volatile uint8_t brightness = 255;

void rst_delay(void) {_delay_us(50);}
 2e0:	08 95       	ret

000002e2 <delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e2:	20 ea       	ldi	r18, 0xA0	; 160
 2e4:	3f e0       	ldi	r19, 0x0F	; 15
void delay(uint32_t _mstime) {while(_mstime){_delay_loop_2(((F_CPU) / 4e3));_mstime--;}}
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <delay+0x14>
 2e8:	f9 01       	movw	r30, r18
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <delay+0x8>
 2ee:	61 50       	subi	r22, 0x01	; 1
 2f0:	70 40       	sbci	r23, 0x00	; 0
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	61 15       	cp	r22, r1
 2f8:	71 05       	cpc	r23, r1
 2fa:	81 05       	cpc	r24, r1
 2fc:	91 05       	cpc	r25, r1
 2fe:	a1 f7       	brne	.-24     	; 0x2e8 <delay+0x6>
 300:	08 95       	ret

00000302 <setPin>:
}


void setPin(uint8_t _port, uint8_t _bit)
{
	*(volatile uint8_t *)(_port - 0x01) |= ( 1 << _bit );
 302:	e8 2f       	mov	r30, r24
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	df 01       	movw	r26, r30
 308:	2e 91       	ld	r18, -X
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <setPin+0x12>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <setPin+0xe>
 318:	28 2b       	or	r18, r24
 31a:	2c 93       	st	X, r18
	*(volatile uint8_t *)_port &= ~( 1 << _bit );
 31c:	90 81       	ld	r25, Z
 31e:	80 95       	com	r24
 320:	89 23       	and	r24, r25
 322:	80 83       	st	Z, r24
}
 324:	08 95       	ret

00000326 <setColor>:


void setColor(uint16_t n, uint8_t r, uint8_t g, uint8_t b)		// LED 64EA = ( n = 0 ~ 63 )
{
	if(n < nCells)
 326:	e0 91 0e 01 	lds	r30, 0x010E
 32a:	f0 91 0f 01 	lds	r31, 0x010F
 32e:	8e 17       	cp	r24, r30
 330:	9f 07       	cpc	r25, r31
 332:	08 f0       	brcs	.+2      	; 0x336 <setColor+0x10>
 334:	55 c0       	rjmp	.+170    	; 0x3e0 <setColor+0xba>
	{
		if(brightness < 0xFF)
 336:	30 91 04 01 	lds	r19, 0x0104
 33a:	3f 3f       	cpi	r19, 0xFF	; 255
 33c:	09 f4       	brne	.+2      	; 0x340 <setColor+0x1a>
 33e:	3f c0       	rjmp	.+126    	; 0x3be <setColor+0x98>
		{
			if(brightness > 0x01)
 340:	30 91 04 01 	lds	r19, 0x0104
 344:	32 30       	cpi	r19, 0x02	; 2
 346:	b0 f1       	brcs	.+108    	; 0x3b4 <setColor+0x8e>
			{
				uint16_t cb = brightness + 1, t = 0;
 348:	e0 91 04 01 	lds	r30, 0x0104
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	31 96       	adiw	r30, 0x01	; 1
    		
	    		t = (g|0x01) * cb;
 350:	41 60       	ori	r20, 0x01	; 1
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	4e 9f       	mul	r20, r30
 356:	d0 01       	movw	r26, r0
 358:	4f 9f       	mul	r20, r31
 35a:	b0 0d       	add	r27, r0
 35c:	5e 9f       	mul	r21, r30
 35e:	b0 0d       	add	r27, r0
 360:	11 24       	eor	r1, r1
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
 362:	a1 38       	cpi	r26, 0x81	; 129
 364:	b1 05       	cpc	r27, r1
 366:	20 f0       	brcs	.+8      	; 0x370 <setColor+0x4a>
 368:	a0 58       	subi	r26, 0x80	; 128
 36a:	b0 40       	sbci	r27, 0x00	; 0
 36c:	4b 2f       	mov	r20, r27
 36e:	01 c0       	rjmp	.+2      	; 0x372 <setColor+0x4c>
 370:	40 e0       	ldi	r20, 0x00	; 0
	    		t = (r|0x01) * cb;
 372:	61 60       	ori	r22, 0x01	; 1
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	6e 9f       	mul	r22, r30
 378:	d0 01       	movw	r26, r0
 37a:	6f 9f       	mul	r22, r31
 37c:	b0 0d       	add	r27, r0
 37e:	7e 9f       	mul	r23, r30
 380:	b0 0d       	add	r27, r0
 382:	11 24       	eor	r1, r1
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
 384:	a1 38       	cpi	r26, 0x81	; 129
 386:	b1 05       	cpc	r27, r1
 388:	20 f0       	brcs	.+8      	; 0x392 <setColor+0x6c>
 38a:	a0 58       	subi	r26, 0x80	; 128
 38c:	b0 40       	sbci	r27, 0x00	; 0
 38e:	6b 2f       	mov	r22, r27
 390:	01 c0       	rjmp	.+2      	; 0x394 <setColor+0x6e>
 392:	60 e0       	ldi	r22, 0x00	; 0
	    		t = (b|0x01) * cb;
 394:	21 60       	ori	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	2e 9f       	mul	r18, r30
 39a:	d0 01       	movw	r26, r0
 39c:	2f 9f       	mul	r18, r31
 39e:	b0 0d       	add	r27, r0
 3a0:	3e 9f       	mul	r19, r30
 3a2:	b0 0d       	add	r27, r0
 3a4:	11 24       	eor	r1, r1
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 3a6:	a1 38       	cpi	r26, 0x81	; 129
 3a8:	b1 05       	cpc	r27, r1
 3aa:	40 f0       	brcs	.+16     	; 0x3bc <setColor+0x96>
 3ac:	a0 58       	subi	r26, 0x80	; 128
 3ae:	b0 40       	sbci	r27, 0x00	; 0
 3b0:	2b 2f       	mov	r18, r27
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <setColor+0x98>
			}			
			else
			{
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
 3b4:	20 e0       	ldi	r18, 0x00	; 0
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
			}			
			else
			{
    			g = 0x00;
 3b6:	40 e0       	ldi	r20, 0x00	; 0
    			r = 0x00;
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <setColor+0x98>
	    		t = (g|0x01) * cb;
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
	    		t = (r|0x01) * cb;
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 3bc:	20 e0       	ldi	r18, 0x00	; 0
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
			}
		}
		uint8_t *p = &cells[n * 3];
 3be:	dc 01       	movw	r26, r24
 3c0:	aa 0f       	add	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	a8 0f       	add	r26, r24
 3c6:	b9 1f       	adc	r27, r25
 3c8:	e0 91 12 01 	lds	r30, 0x0112
 3cc:	f0 91 13 01 	lds	r31, 0x0113
 3d0:	ea 0f       	add	r30, r26
 3d2:	fb 1f       	adc	r31, r27

		*p++ = g;
 3d4:	df 01       	movw	r26, r30
 3d6:	4d 93       	st	X+, r20
		*p++ = r;
 3d8:	61 83       	std	Z+1, r22	; 0x01
		*p = b;
 3da:	11 96       	adiw	r26, 0x01	; 1
 3dc:	2c 93       	st	X, r18
 3de:	11 97       	sbiw	r26, 0x01	; 1
 3e0:	08 95       	ret

000003e2 <setColor_RGB>:
	}
}


void setColor_RGB(uint16_t n, uint32_t c)
{
 3e2:	1f 93       	push	r17
	if(n < nCells)
 3e4:	20 91 0e 01 	lds	r18, 0x010E
 3e8:	30 91 0f 01 	lds	r19, 0x010F
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <setColor_RGB+0x12>
 3f2:	58 c0       	rjmp	.+176    	; 0x4a4 <setColor_RGB+0xc2>
	{
		uint8_t 
			r = (uint8_t)(c >> 16),
			g = (uint8_t)(c >>  8),
 3f4:	15 2f       	mov	r17, r21
			b = (uint8_t)c;

		if(brightness < 0xFF)
 3f6:	20 91 04 01 	lds	r18, 0x0104
 3fa:	2f 3f       	cpi	r18, 0xFF	; 255
 3fc:	09 f4       	brne	.+2      	; 0x400 <setColor_RGB+0x1e>
 3fe:	41 c0       	rjmp	.+130    	; 0x482 <setColor_RGB+0xa0>
		{
			if(brightness > 0x01)
 400:	20 91 04 01 	lds	r18, 0x0104
 404:	22 30       	cpi	r18, 0x02	; 2
 406:	c0 f1       	brcs	.+112    	; 0x478 <setColor_RGB+0x96>
			{
				uint16_t cb = brightness + 1, t = 0;
 408:	20 91 04 01 	lds	r18, 0x0104
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	3f 4f       	sbci	r19, 0xFF	; 255
    		
	    		t = (g|0x01) * cb;
 412:	11 60       	ori	r17, 0x01	; 1
 414:	a1 2f       	mov	r26, r17
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	a2 9f       	mul	r26, r18
 41a:	f0 01       	movw	r30, r0
 41c:	a3 9f       	mul	r26, r19
 41e:	f0 0d       	add	r31, r0
 420:	b2 9f       	mul	r27, r18
 422:	f0 0d       	add	r31, r0
 424:	11 24       	eor	r1, r1
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
 426:	e1 38       	cpi	r30, 0x81	; 129
 428:	f1 05       	cpc	r31, r1
 42a:	20 f0       	brcs	.+8      	; 0x434 <setColor_RGB+0x52>
 42c:	e0 58       	subi	r30, 0x80	; 128
 42e:	f0 40       	sbci	r31, 0x00	; 0
 430:	1f 2f       	mov	r17, r31
 432:	01 c0       	rjmp	.+2      	; 0x436 <setColor_RGB+0x54>
 434:	10 e0       	ldi	r17, 0x00	; 0
	    		t = (r|0x01) * cb;
 436:	61 60       	ori	r22, 0x01	; 1
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	62 9f       	mul	r22, r18
 43c:	f0 01       	movw	r30, r0
 43e:	63 9f       	mul	r22, r19
 440:	f0 0d       	add	r31, r0
 442:	72 9f       	mul	r23, r18
 444:	f0 0d       	add	r31, r0
 446:	11 24       	eor	r1, r1
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
 448:	e1 38       	cpi	r30, 0x81	; 129
 44a:	f1 05       	cpc	r31, r1
 44c:	20 f0       	brcs	.+8      	; 0x456 <setColor_RGB+0x74>
 44e:	e0 58       	subi	r30, 0x80	; 128
 450:	f0 40       	sbci	r31, 0x00	; 0
 452:	6f 2f       	mov	r22, r31
 454:	01 c0       	rjmp	.+2      	; 0x458 <setColor_RGB+0x76>
 456:	60 e0       	ldi	r22, 0x00	; 0
	    		t = (b|0x01) * cb;
 458:	41 60       	ori	r20, 0x01	; 1
 45a:	50 e0       	ldi	r21, 0x00	; 0
 45c:	42 9f       	mul	r20, r18
 45e:	f0 01       	movw	r30, r0
 460:	43 9f       	mul	r20, r19
 462:	f0 0d       	add	r31, r0
 464:	52 9f       	mul	r21, r18
 466:	f0 0d       	add	r31, r0
 468:	11 24       	eor	r1, r1
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 46a:	e1 38       	cpi	r30, 0x81	; 129
 46c:	f1 05       	cpc	r31, r1
 46e:	40 f0       	brcs	.+16     	; 0x480 <setColor_RGB+0x9e>
 470:	e0 58       	subi	r30, 0x80	; 128
 472:	f0 40       	sbci	r31, 0x00	; 0
 474:	4f 2f       	mov	r20, r31
 476:	05 c0       	rjmp	.+10     	; 0x482 <setColor_RGB+0xa0>
			}			
			else
			{
    			g = 0x00;
    			r = 0x00;
    			b = 0x00;
 478:	40 e0       	ldi	r20, 0x00	; 0
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
			}			
			else
			{
    			g = 0x00;
 47a:	10 e0       	ldi	r17, 0x00	; 0
    			r = 0x00;
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	01 c0       	rjmp	.+2      	; 0x482 <setColor_RGB+0xa0>
	    		t = (g|0x01) * cb;
	    		(t>0x80)?(g = (t-0x80) >> 8):(g = 0x00);
	    		t = (r|0x01) * cb;
	    		(t>0x80)?(r = (t-0x80) >> 8):(r = 0x00);
	    		t = (b|0x01) * cb;
	    		(t>0x80)?(b = (t-0x80) >> 8):(b = 0x00);
 480:	40 e0       	ldi	r20, 0x00	; 0
    			r = 0x00;
    			b = 0x00;
			}
		}

		uint8_t *p = &cells[n * 3];
 482:	9c 01       	movw	r18, r24
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	28 0f       	add	r18, r24
 48a:	39 1f       	adc	r19, r25
 48c:	e0 91 12 01 	lds	r30, 0x0112
 490:	f0 91 13 01 	lds	r31, 0x0113
 494:	e2 0f       	add	r30, r18
 496:	f3 1f       	adc	r31, r19

		*p++ = g;
 498:	df 01       	movw	r26, r30
 49a:	1d 93       	st	X+, r17
		*p++ = r;
 49c:	61 83       	std	Z+1, r22	; 0x01
		*p = b;
 49e:	11 96       	adiw	r26, 0x01	; 1
 4a0:	4c 93       	st	X, r20
 4a2:	11 97       	sbiw	r26, 0x01	; 1
	}
}
 4a4:	1f 91       	pop	r17
 4a6:	08 95       	ret

000004a8 <show>:


void show(void)
{
 4a8:	df 93       	push	r29
 4aa:	cf 93       	push	r28
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	27 97       	sbiw	r28, 0x07	; 7
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
	rst_delay();								// 50us Delay
 4bc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <rst_delay>
	asm volatile("cli");						// interrupt Disable
 4c0:	f8 94       	cli

	volatile uint16_t loopcnt_i = nBytes;		// loop counter : led * 3 byte
 4c2:	80 91 0c 01 	lds	r24, 0x010C
 4c6:	90 91 0d 01 	lds	r25, 0x010D
 4ca:	9f 83       	std	Y+7, r25	; 0x07
 4cc:	8e 83       	std	Y+6, r24	; 0x06

	volatile uint8_t
		*ptr = cells,
		curbyte = *ptr++;
 4ce:	a0 91 12 01 	lds	r26, 0x0112
 4d2:	b0 91 13 01 	lds	r27, 0x0113
 4d6:	8d 91       	ld	r24, X+
 4d8:	89 83       	std	Y+1, r24	; 0x01

	volatile uint8_t next, bit, high, low;

	high = *port | maskPin;
 4da:	e0 91 10 01 	lds	r30, 0x0110
 4de:	f0 91 11 01 	lds	r31, 0x0111
 4e2:	80 81       	ld	r24, Z
 4e4:	90 91 14 01 	lds	r25, 0x0114
 4e8:	89 2b       	or	r24, r25
 4ea:	8c 83       	std	Y+4, r24	; 0x04
	low = *port & ~maskPin;
 4ec:	90 81       	ld	r25, Z
 4ee:	80 91 14 01 	lds	r24, 0x0114
 4f2:	80 95       	com	r24
 4f4:	89 23       	and	r24, r25
 4f6:	8d 83       	std	Y+5, r24	; 0x05

	next = low;
 4f8:	8d 81       	ldd	r24, Y+5	; 0x05
 4fa:	8a 83       	std	Y+2, r24	; 0x02
	bit = 8;
 4fc:	88 e0       	ldi	r24, 0x08	; 8
 4fe:	8b 83       	std	Y+3, r24	; 0x03

	asm volatile(
 500:	5c 81       	ldd	r21, Y+4	; 0x04
 502:	6d 81       	ldd	r22, Y+5	; 0x05
 504:	49 81       	ldd	r20, Y+1	; 0x01
 506:	3b 81       	ldd	r19, Y+3	; 0x03
 508:	2a 81       	ldd	r18, Y+2	; 0x02
 50a:	8e 81       	ldd	r24, Y+6	; 0x06
 50c:	9f 81       	ldd	r25, Y+7	; 0x07

0000050e <run>:
 50e:	50 83       	st	Z, r21
 510:	47 fd       	sbrc	r20, 7
 512:	25 2f       	mov	r18, r21
 514:	20 83       	st	Z, r18
 516:	26 2f       	mov	r18, r22
 518:	3a 95       	dec	r19
 51a:	39 f0       	breq	.+14     	; 0x52a <nextByte>
 51c:	44 0f       	add	r20, r20
 51e:	00 c0       	rjmp	.+0      	; 0x520 <run+0x12>
 520:	00 00       	nop
 522:	60 83       	st	Z, r22
 524:	00 c0       	rjmp	.+0      	; 0x526 <run+0x18>
 526:	00 00       	nop
 528:	f2 cf       	rjmp	.-28     	; 0x50e <run>

0000052a <nextByte>:
 52a:	4d 91       	ld	r20, X+
 52c:	60 83       	st	Z, r22
 52e:	38 e0       	ldi	r19, 0x08	; 8
 530:	00 00       	nop
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	61 f7       	brne	.-40     	; 0x50e <run>
 536:	f0 93 11 01 	sts	0x0111, r31
 53a:	e0 93 10 01 	sts	0x0110, r30
 53e:	49 83       	std	Y+1, r20	; 0x01
 540:	3b 83       	std	Y+3, r19	; 0x03
 542:	2a 83       	std	Y+2, r18	; 0x02
 544:	9f 83       	std	Y+7, r25	; 0x07
 546:	8e 83       	std	Y+6, r24	; 0x06
		[count] "+w" (loopcnt_i)
		: [ptr]   "e"  (ptr),
		[high]  "r"  (high),
		[low]   "r"  (low));

	asm volatile("sei");						// interrupt Enable
 548:	78 94       	sei
	rst_delay();								// 50us Delay	
 54a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <rst_delay>
}
 54e:	27 96       	adiw	r28, 0x07	; 7
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	08 95       	ret

00000560 <NS_Rainbow_init>:
void delay(uint32_t _mstime) {while(_mstime){_delay_loop_2(((F_CPU) / 4e3));_mstime--;}}


// Initializer Func
void NS_Rainbow_init(uint16_t _numled, volatile uint8_t _port, uint8_t _outbit)
{
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	df 93       	push	r29
 566:	cf 93       	push	r28
 568:	00 d0       	rcall	.+0      	; 0x56a <NS_Rainbow_init+0xa>
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	8c 01       	movw	r16, r24
 570:	69 83       	std	Y+1, r22	; 0x01
	setPin(_port, _outbit);
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	64 2f       	mov	r22, r20
 576:	4a 83       	std	Y+2, r20	; 0x02
 578:	0e 94 81 01 	call	0x302	; 0x302 <setPin>
	port = (volatile uint8_t *)_port;
 57c:	89 81       	ldd	r24, Y+1	; 0x01
 57e:	80 93 10 01 	sts	0x0110, r24
 582:	10 92 11 01 	sts	0x0111, r1
	maskPin = ( 1 << _outbit );
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	4a 81       	ldd	r20, Y+2	; 0x02
 58c:	02 c0       	rjmp	.+4      	; 0x592 <NS_Rainbow_init+0x32>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	4a 95       	dec	r20
 594:	e2 f7       	brpl	.-8      	; 0x58e <NS_Rainbow_init+0x2e>
 596:	80 93 14 01 	sts	0x0114, r24
	
	nCells		= _numled;
 59a:	10 93 0f 01 	sts	0x010F, r17
 59e:	00 93 0e 01 	sts	0x010E, r16
	nBytes		= maxLEDBytes;
 5a2:	80 91 02 01 	lds	r24, 0x0102
 5a6:	90 91 03 01 	lds	r25, 0x0103
 5aa:	90 93 0d 01 	sts	0x010D, r25
 5ae:	80 93 0c 01 	sts	0x010C, r24

	brightness = DEFALUT_BRIGHT;						
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
 5b4:	80 93 04 01 	sts	0x0104, r24
		
	if(cells = (uint8_t *)malloc(nBytes))		// MAXLED(Default=64) Size LED Clear
 5b8:	80 91 0c 01 	lds	r24, 0x010C
 5bc:	90 91 0d 01 	lds	r25, 0x010D
 5c0:	0e 94 22 05 	call	0xa44	; 0xa44 <malloc>
 5c4:	90 93 13 01 	sts	0x0113, r25
 5c8:	80 93 12 01 	sts	0x0112, r24
 5cc:	00 97       	sbiw	r24, 0x00	; 0
 5ce:	49 f0       	breq	.+18     	; 0x5e2 <NS_Rainbow_init+0x82>
		memset(cells, 0, nBytes);
 5d0:	20 91 0c 01 	lds	r18, 0x010C
 5d4:	30 91 0d 01 	lds	r19, 0x010D
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	a9 01       	movw	r20, r18
 5de:	0e 94 55 06 	call	0xcaa	; 0xcaa <memset>
	show();
 5e2:	0e 94 54 02 	call	0x4a8	; 0x4a8 <show>
	free(cells);
 5e6:	80 91 12 01 	lds	r24, 0x0112
 5ea:	90 91 13 01 	lds	r25, 0x0113
 5ee:	0e 94 bc 05 	call	0xb78	; 0xb78 <free>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	90 e7       	ldi	r25, 0x70	; 112
 5f6:	a2 e0       	ldi	r26, 0x02	; 2
 5f8:	81 50       	subi	r24, 0x01	; 1
 5fa:	90 40       	sbci	r25, 0x00	; 0
 5fc:	a0 40       	sbci	r26, 0x00	; 0
 5fe:	e1 f7       	brne	.-8      	; 0x5f8 <NS_Rainbow_init+0x98>
 600:	00 c0       	rjmp	.+0      	; 0x602 <NS_Rainbow_init+0xa2>
 602:	00 00       	nop
	_delay_ms(50);								// Stabilizer Delay

	nBytes = _numled * 3;
 604:	c8 01       	movw	r24, r16
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	80 0f       	add	r24, r16
 60c:	91 1f       	adc	r25, r17
 60e:	90 93 0d 01 	sts	0x010D, r25
 612:	80 93 0c 01 	sts	0x010C, r24
	if(cells = (uint8_t *)malloc(nBytes))
 616:	80 91 0c 01 	lds	r24, 0x010C
 61a:	90 91 0d 01 	lds	r25, 0x010D
 61e:	0e 94 22 05 	call	0xa44	; 0xa44 <malloc>
 622:	90 93 13 01 	sts	0x0113, r25
 626:	80 93 12 01 	sts	0x0112, r24
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	49 f0       	breq	.+18     	; 0x640 <NS_Rainbow_init+0xe0>
		memset(cells, 0, nBytes);
 62e:	20 91 0c 01 	lds	r18, 0x010C
 632:	30 91 0d 01 	lds	r19, 0x010D
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	a9 01       	movw	r20, r18
 63c:	0e 94 55 06 	call	0xcaa	; 0xcaa <memset>
	
}
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	cf 91       	pop	r28
 646:	df 91       	pop	r29
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	08 95       	ret

0000064e <clear>:
}


void clear(void)
{
	memset(cells, 0, nBytes);
 64e:	20 91 0c 01 	lds	r18, 0x010C
 652:	30 91 0d 01 	lds	r19, 0x010D
 656:	80 91 12 01 	lds	r24, 0x0112
 65a:	90 91 13 01 	lds	r25, 0x0113
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	a9 01       	movw	r20, r18
 664:	0e 94 55 06 	call	0xcaa	; 0xcaa <memset>
	show();
 668:	0e 94 54 02 	call	0x4a8	; 0x4a8 <show>
}
 66c:	08 95       	ret

0000066e <cell_clear>:


void cell_clear(uint16_t nCell)
{
	setColor(nCell, 0, 0, 0);
 66e:	60 e0       	ldi	r22, 0x00	; 0
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	20 e0       	ldi	r18, 0x00	; 0
 674:	0e 94 93 01 	call	0x326	; 0x326 <setColor>
	show();
 678:	0e 94 54 02 	call	0x4a8	; 0x4a8 <show>
}
 67c:	08 95       	ret

0000067e <setBrightness>:



void setBrightness(uint8_t b)
{
 67e:	4f 92       	push	r4
 680:	5f 92       	push	r5
 682:	6f 92       	push	r6
 684:	7f 92       	push	r7
 686:	8f 92       	push	r8
 688:	9f 92       	push	r9
 68a:	af 92       	push	r10
 68c:	bf 92       	push	r11
 68e:	cf 92       	push	r12
 690:	df 92       	push	r13
 692:	ef 92       	push	r14
 694:	ff 92       	push	r15
 696:	1f 93       	push	r17
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	18 2f       	mov	r17, r24
	if( b != brightness )
 69e:	80 91 04 01 	lds	r24, 0x0104
 6a2:	18 17       	cp	r17, r24
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <setBrightness+0x2a>
 6a6:	b0 c0       	rjmp	.+352    	; 0x808 <setBrightness+0x18a>
	{
		uint8_t *ptr = cells;
 6a8:	30 91 12 01 	lds	r19, 0x0112
 6ac:	20 91 13 01 	lds	r18, 0x0113
		uint16_t nb = b + 1, cb = brightness + 1;
 6b0:	41 2e       	mov	r4, r17
 6b2:	55 24       	eor	r5, r5
 6b4:	08 94       	sec
 6b6:	41 1c       	adc	r4, r1
 6b8:	51 1c       	adc	r5, r1
 6ba:	80 91 04 01 	lds	r24, 0x0104
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	01 96       	adiw	r24, 0x01	; 1
	
		if (b < 1)
 6c2:	11 23       	and	r17, r17
 6c4:	99 f5       	brne	.+102    	; 0x72c <setBrightness+0xae>
 6c6:	a9 01       	movw	r20, r18
 6c8:	e5 2e       	mov	r14, r21
 6ca:	e7 01       	movw	r28, r14
 6cc:	7e 01       	movw	r14, r28
 6ce:	f2 2e       	mov	r15, r18
 6d0:	e7 01       	movw	r28, r14
 6d2:	67 01       	movw	r12, r14
 6d4:	ee 24       	eor	r14, r14
 6d6:	ff 24       	eor	r15, r15
		{
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 6d8:	4c 01       	movw	r8, r24
 6da:	aa 24       	eor	r10, r10
 6dc:	bb 24       	eor	r11, r11
 6de:	1e c0       	rjmp	.+60     	; 0x71c <setBrightness+0x9e>
 6e0:	f6 01       	movw	r30, r12
 6e2:	61 91       	ld	r22, Z+
 6e4:	6f 01       	movw	r12, r30
 6e6:	66 23       	and	r22, r22
 6e8:	a1 f0       	breq	.+40     	; 0x712 <setBrightness+0x94>
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	6f 5f       	subi	r22, 0xFF	; 255
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	88 27       	eor	r24, r24
 6f2:	77 fd       	sbrc	r23, 7
 6f4:	80 95       	com	r24
 6f6:	98 2f       	mov	r25, r24
 6f8:	cb 01       	movw	r24, r22
 6fa:	77 27       	eor	r23, r23
 6fc:	66 27       	eor	r22, r22
 6fe:	a5 01       	movw	r20, r10
 700:	94 01       	movw	r18, r8
 702:	0e 94 00 05 	call	0xa00	; 0xa00 <__udivmodsi4>
 706:	20 58       	subi	r18, 0x80	; 128
 708:	30 40       	sbci	r19, 0x00	; 0
 70a:	40 40       	sbci	r20, 0x00	; 0
 70c:	50 40       	sbci	r21, 0x00	; 0
 70e:	38 83       	st	Y, r19
 710:	01 c0       	rjmp	.+2      	; 0x714 <setBrightness+0x96>
 712:	18 82       	st	Y, r1
		uint8_t *ptr = cells;
		uint16_t nb = b + 1, cb = brightness + 1;
	
		if (b < 1)
		{
			for(uint16_t i = 0; i < nBytes; i++)
 714:	08 94       	sec
 716:	e1 1c       	adc	r14, r1
 718:	f1 1c       	adc	r15, r1
 71a:	21 96       	adiw	r28, 0x01	; 1
 71c:	80 91 0c 01 	lds	r24, 0x010C
 720:	90 91 0d 01 	lds	r25, 0x010D
 724:	e8 16       	cp	r14, r24
 726:	f9 06       	cpc	r15, r25
 728:	d8 f2       	brcs	.-74     	; 0x6e0 <setBrightness+0x62>
 72a:	6c c0       	rjmp	.+216    	; 0x804 <setBrightness+0x186>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
 72c:	1f 3f       	cpi	r17, 0xFF	; 255
 72e:	89 f0       	breq	.+34     	; 0x752 <setBrightness+0xd4>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
 730:	54 2c       	mov	r5, r4
 732:	44 24       	eor	r4, r4
 734:	66 24       	eor	r6, r6
 736:	77 24       	eor	r7, r7
 738:	a9 01       	movw	r20, r18
 73a:	e5 2e       	mov	r14, r21
 73c:	e7 01       	movw	r28, r14
 73e:	7e 01       	movw	r14, r28
 740:	f4 2e       	mov	r15, r20
 742:	e7 01       	movw	r28, r14
 744:	67 01       	movw	r12, r14
 746:	ee 24       	eor	r14, r14
 748:	ff 24       	eor	r15, r15
 74a:	4c 01       	movw	r8, r24
 74c:	aa 24       	eor	r10, r10
 74e:	bb 24       	eor	r11, r11
 750:	52 c0       	rjmp	.+164    	; 0x7f6 <setBrightness+0x178>
 752:	a9 01       	movw	r20, r18
 754:	e5 2f       	mov	r30, r21
 756:	ef 01       	movw	r28, r30
 758:	7e 01       	movw	r14, r28
 75a:	f4 2e       	mov	r15, r20
 75c:	e7 01       	movw	r28, r14
		if (b < 1)
		{
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
 75e:	67 01       	movw	r12, r14
 760:	ee 24       	eor	r14, r14
 762:	ff 24       	eor	r15, r15
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
 764:	4c 01       	movw	r8, r24
 766:	aa 24       	eor	r10, r10
 768:	bb 24       	eor	r11, r11
 76a:	1e c0       	rjmp	.+60     	; 0x7a8 <setBrightness+0x12a>
 76c:	f6 01       	movw	r30, r12
 76e:	61 91       	ld	r22, Z+
 770:	6f 01       	movw	r12, r30
 772:	66 23       	and	r22, r22
 774:	a1 f0       	breq	.+40     	; 0x79e <setBrightness+0x120>
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	6f 5f       	subi	r22, 0xFF	; 255
 77a:	7f 4f       	sbci	r23, 0xFF	; 255
 77c:	88 27       	eor	r24, r24
 77e:	77 fd       	sbrc	r23, 7
 780:	80 95       	com	r24
 782:	98 2f       	mov	r25, r24
 784:	cb 01       	movw	r24, r22
 786:	77 27       	eor	r23, r23
 788:	66 27       	eor	r22, r22
 78a:	a5 01       	movw	r20, r10
 78c:	94 01       	movw	r18, r8
 78e:	0e 94 00 05 	call	0xa00	; 0xa00 <__udivmodsi4>
 792:	20 58       	subi	r18, 0x80	; 128
 794:	30 40       	sbci	r19, 0x00	; 0
 796:	40 40       	sbci	r20, 0x00	; 0
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	38 83       	st	Y, r19
 79c:	01 c0       	rjmp	.+2      	; 0x7a0 <setBrightness+0x122>
 79e:	18 82       	st	Y, r1
			for(uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else if (b > 0xFE)
		{
			for (uint16_t i = 0; i < nBytes; i++)
 7a0:	08 94       	sec
 7a2:	e1 1c       	adc	r14, r1
 7a4:	f1 1c       	adc	r15, r1
 7a6:	21 96       	adiw	r28, 0x01	; 1
 7a8:	80 91 0c 01 	lds	r24, 0x010C
 7ac:	90 91 0d 01 	lds	r25, 0x010D
 7b0:	e8 16       	cp	r14, r24
 7b2:	f9 06       	cpc	r15, r25
 7b4:	d8 f2       	brcs	.-74     	; 0x76c <setBrightness+0xee>
 7b6:	26 c0       	rjmp	.+76     	; 0x804 <setBrightness+0x186>
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
 7b8:	f6 01       	movw	r30, r12
 7ba:	21 91       	ld	r18, Z+
 7bc:	6f 01       	movw	r12, r30
 7be:	22 23       	and	r18, r18
 7c0:	a9 f0       	breq	.+42     	; 0x7ec <setBrightness+0x16e>
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	2f 5f       	subi	r18, 0xFF	; 255
 7c6:	3f 4f       	sbci	r19, 0xFF	; 255
 7c8:	44 27       	eor	r20, r20
 7ca:	37 fd       	sbrc	r19, 7
 7cc:	40 95       	com	r20
 7ce:	54 2f       	mov	r21, r20
 7d0:	c3 01       	movw	r24, r6
 7d2:	b2 01       	movw	r22, r4
 7d4:	0e 94 c1 04 	call	0x982	; 0x982 <__mulsi3>
 7d8:	a5 01       	movw	r20, r10
 7da:	94 01       	movw	r18, r8
 7dc:	0e 94 00 05 	call	0xa00	; 0xa00 <__udivmodsi4>
 7e0:	20 58       	subi	r18, 0x80	; 128
 7e2:	30 40       	sbci	r19, 0x00	; 0
 7e4:	40 40       	sbci	r20, 0x00	; 0
 7e6:	50 40       	sbci	r21, 0x00	; 0
 7e8:	38 83       	st	Y, r19
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <setBrightness+0x170>
 7ec:	18 82       	st	Y, r1
			for (uint16_t i = 0; i < nBytes; i++)
				(*ptr > 0) ? (*ptr++ = (((uint32_t)(*ptr + 1) << 16) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		else
		{
			for (uint16_t i = 0; i < nBytes; i++)
 7ee:	08 94       	sec
 7f0:	e1 1c       	adc	r14, r1
 7f2:	f1 1c       	adc	r15, r1
 7f4:	21 96       	adiw	r28, 0x01	; 1
 7f6:	80 91 0c 01 	lds	r24, 0x010C
 7fa:	90 91 0d 01 	lds	r25, 0x010D
 7fe:	e8 16       	cp	r14, r24
 800:	f9 06       	cpc	r15, r25
 802:	d0 f2       	brcs	.-76     	; 0x7b8 <setBrightness+0x13a>
				(*ptr > 0) ? (*ptr++ = ((uint32_t)(*ptr + 1) * (nb << 8) / cb - 0x80) >> 8) : (*ptr++ = 0);
		}
		brightness = b;	
 804:	10 93 04 01 	sts	0x0104, r17
	}
}
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	cf 90       	pop	r12
 816:	bf 90       	pop	r11
 818:	af 90       	pop	r10
 81a:	9f 90       	pop	r9
 81c:	8f 90       	pop	r8
 81e:	7f 90       	pop	r7
 820:	6f 90       	pop	r6
 822:	5f 90       	pop	r5
 824:	4f 90       	pop	r4
 826:	08 95       	ret

00000828 <RGBtoColor>:


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
 828:	ef 92       	push	r14
 82a:	ff 92       	push	r15
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	e4 2e       	mov	r14, r20
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 832:	26 2f       	mov	r18, r22
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	54 2f       	mov	r21, r20
 83c:	43 2f       	mov	r20, r19
 83e:	32 2f       	mov	r19, r18
 840:	22 27       	eor	r18, r18
 842:	ff 24       	eor	r15, r15
 844:	00 e0       	ldi	r16, 0x00	; 0
 846:	10 e0       	ldi	r17, 0x00	; 0
 848:	2e 29       	or	r18, r14
 84a:	3f 29       	or	r19, r15
 84c:	40 2b       	or	r20, r16
 84e:	51 2b       	or	r21, r17
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	a0 e0       	ldi	r26, 0x00	; 0
 854:	b0 e0       	ldi	r27, 0x00	; 0
 856:	dc 01       	movw	r26, r24
 858:	99 27       	eor	r25, r25
 85a:	88 27       	eor	r24, r24
 85c:	28 2b       	or	r18, r24
 85e:	39 2b       	or	r19, r25
 860:	4a 2b       	or	r20, r26
 862:	5b 2b       	or	r21, r27
}
 864:	b9 01       	movw	r22, r18
 866:	ca 01       	movw	r24, r20
 868:	1f 91       	pop	r17
 86a:	0f 91       	pop	r16
 86c:	ff 90       	pop	r15
 86e:	ef 90       	pop	r14
 870:	08 95       	ret

00000872 <rainbow>:



void rainbow(uint16_t interval)
{
 872:	6f 92       	push	r6
 874:	7f 92       	push	r7
 876:	8f 92       	push	r8
 878:	9f 92       	push	r9
 87a:	af 92       	push	r10
 87c:	bf 92       	push	r11
 87e:	cf 92       	push	r12
 880:	df 92       	push	r13
 882:	ef 92       	push	r14
 884:	ff 92       	push	r15
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
	uint16_t n = nCells;
 88e:	e0 90 0e 01 	lds	r14, 0x010E
 892:	f0 90 0f 01 	lds	r15, 0x010F

	for(uint16_t j=0; j<255; j++) 
 896:	00 e0       	ldi	r16, 0x00	; 0
 898:	10 e0       	ldi	r17, 0x00	; 0
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
		{
			uint8_t r_pos = (((i<<8) -  i) / n + j) % 0xFF;
 89a:	3f ef       	ldi	r19, 0xFF	; 255
 89c:	83 2e       	mov	r8, r19
 89e:	91 2c       	mov	r9, r1
			uint8_t sect = (r_pos / 0x55) % 0x03, pos = (r_pos % 0x55) * 0x03;
 8a0:	25 e5       	ldi	r18, 0x55	; 85
 8a2:	72 2e       	mov	r7, r18
 8a4:	b3 e0       	ldi	r27, 0x03	; 3
 8a6:	6b 2e       	mov	r6, r27
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
			}  
		}
	
		show();
		delay(interval);
 8a8:	5c 01       	movw	r10, r24
 8aa:	cc 24       	eor	r12, r12
 8ac:	dd 24       	eor	r13, r13
 8ae:	57 c0       	rjmp	.+174    	; 0x95e <rainbow+0xec>

	for(uint16_t j=0; j<255; j++) 
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
		{
			uint8_t r_pos = (((i<<8) -  i) / n + j) % 0xFF;
 8b0:	9c 2f       	mov	r25, r28
 8b2:	88 27       	eor	r24, r24
 8b4:	8c 1b       	sub	r24, r28
 8b6:	9d 0b       	sbc	r25, r29
 8b8:	b7 01       	movw	r22, r14
 8ba:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodhi4>
 8be:	60 0f       	add	r22, r16
 8c0:	71 1f       	adc	r23, r17
 8c2:	cb 01       	movw	r24, r22
 8c4:	b4 01       	movw	r22, r8
 8c6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__udivmodhi4>
			uint8_t sect = (r_pos / 0x55) % 0x03, pos = (r_pos % 0x55) * 0x03;
 8ca:	67 2d       	mov	r22, r7
 8cc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__udivmodqi4>
 8d0:	29 2f       	mov	r18, r25
 8d2:	22 0f       	add	r18, r18
 8d4:	29 0f       	add	r18, r25
 8d6:	66 2d       	mov	r22, r6
 8d8:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__udivmodqi4>
 8dc:	39 2f       	mov	r19, r25

			switch(sect) 
 8de:	91 30       	cpi	r25, 0x01	; 1
 8e0:	99 f0       	breq	.+38     	; 0x908 <rainbow+0x96>
 8e2:	42 2f       	mov	r20, r18
 8e4:	40 95       	com	r20
 8e6:	82 2f       	mov	r24, r18
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	a0 e0       	ldi	r26, 0x00	; 0
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	32 30       	cpi	r19, 0x02	; 2
 8f0:	c9 f0       	breq	.+50     	; 0x924 <rainbow+0xb2>
}


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	ba 01       	movw	r22, r20
 8fa:	55 27       	eor	r21, r21
 8fc:	44 27       	eor	r20, r20
 8fe:	ba 2f       	mov	r27, r26
 900:	a9 2f       	mov	r26, r25
 902:	98 2f       	mov	r25, r24
 904:	88 27       	eor	r24, r24
 906:	14 c0       	rjmp	.+40     	; 0x930 <rainbow+0xbe>
			{
				case 0: 
					setColor_RGB(i, RGBtoColor(0xFF - pos, pos, 0x00)); break;

				case 1: 
					setColor_RGB(i, RGBtoColor(0x00, 0xFF - pos, pos)); break;
 908:	42 2f       	mov	r20, r18
 90a:	40 95       	com	r20
}


uint32_t RGBtoColor(uint8_t r, uint8_t g, uint8_t b)
{
	return ((uint32_t)r << 16) | ((uint32_t)g << 8) | b;
 90c:	50 e0       	ldi	r21, 0x00	; 0
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	76 2f       	mov	r23, r22
 914:	65 2f       	mov	r22, r21
 916:	54 2f       	mov	r21, r20
 918:	44 27       	eor	r20, r20
 91a:	82 2f       	mov	r24, r18
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	a0 e0       	ldi	r26, 0x00	; 0
 920:	b0 e0       	ldi	r27, 0x00	; 0
 922:	06 c0       	rjmp	.+12     	; 0x930 <rainbow+0xbe>
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	60 e0       	ldi	r22, 0x00	; 0
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	dc 01       	movw	r26, r24
 92c:	99 27       	eor	r25, r25
 92e:	88 27       	eor	r24, r24
 930:	48 2b       	or	r20, r24
 932:	59 2b       	or	r21, r25
 934:	6a 2b       	or	r22, r26
 936:	7b 2b       	or	r23, r27

				case 1: 
					setColor_RGB(i, RGBtoColor(0x00, 0xFF - pos, pos)); break;

				case 2:
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
 938:	ce 01       	movw	r24, r28
 93a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <setColor_RGB>
{
	uint16_t n = nCells;

	for(uint16_t j=0; j<255; j++) 
	{  // one cycle 
		for(uint16_t i=0; i<n; i++) 
 93e:	21 96       	adiw	r28, 0x01	; 1
 940:	ce 15       	cp	r28, r14
 942:	df 05       	cpc	r29, r15
 944:	08 f4       	brcc	.+2      	; 0x948 <rainbow+0xd6>
 946:	b4 cf       	rjmp	.-152    	; 0x8b0 <rainbow+0x3e>
				case 2:
					setColor_RGB(i, RGBtoColor(pos, 0x00, 0xFF - pos)); break;
			}  
		}
	
		show();
 948:	0e 94 54 02 	call	0x4a8	; 0x4a8 <show>
		delay(interval);
 94c:	c6 01       	movw	r24, r12
 94e:	b5 01       	movw	r22, r10
 950:	0e 94 71 01 	call	0x2e2	; 0x2e2 <delay>

void rainbow(uint16_t interval)
{
	uint16_t n = nCells;

	for(uint16_t j=0; j<255; j++) 
 954:	0f 5f       	subi	r16, 0xFF	; 255
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	0f 3f       	cpi	r16, 0xFF	; 255
 95a:	11 05       	cpc	r17, r1
 95c:	19 f0       	breq	.+6      	; 0x964 <rainbow+0xf2>
}



void rainbow(uint16_t interval)
{
 95e:	c0 e0       	ldi	r28, 0x00	; 0
 960:	d0 e0       	ldi	r29, 0x00	; 0
 962:	ee cf       	rjmp	.-36     	; 0x940 <rainbow+0xce>
		}
	
		show();
		delay(interval);
	}
}
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	1f 91       	pop	r17
 96a:	0f 91       	pop	r16
 96c:	ff 90       	pop	r15
 96e:	ef 90       	pop	r14
 970:	df 90       	pop	r13
 972:	cf 90       	pop	r12
 974:	bf 90       	pop	r11
 976:	af 90       	pop	r10
 978:	9f 90       	pop	r9
 97a:	8f 90       	pop	r8
 97c:	7f 90       	pop	r7
 97e:	6f 90       	pop	r6
 980:	08 95       	ret

00000982 <__mulsi3>:
 982:	62 9f       	mul	r22, r18
 984:	d0 01       	movw	r26, r0
 986:	73 9f       	mul	r23, r19
 988:	f0 01       	movw	r30, r0
 98a:	82 9f       	mul	r24, r18
 98c:	e0 0d       	add	r30, r0
 98e:	f1 1d       	adc	r31, r1
 990:	64 9f       	mul	r22, r20
 992:	e0 0d       	add	r30, r0
 994:	f1 1d       	adc	r31, r1
 996:	92 9f       	mul	r25, r18
 998:	f0 0d       	add	r31, r0
 99a:	83 9f       	mul	r24, r19
 99c:	f0 0d       	add	r31, r0
 99e:	74 9f       	mul	r23, r20
 9a0:	f0 0d       	add	r31, r0
 9a2:	65 9f       	mul	r22, r21
 9a4:	f0 0d       	add	r31, r0
 9a6:	99 27       	eor	r25, r25
 9a8:	72 9f       	mul	r23, r18
 9aa:	b0 0d       	add	r27, r0
 9ac:	e1 1d       	adc	r30, r1
 9ae:	f9 1f       	adc	r31, r25
 9b0:	63 9f       	mul	r22, r19
 9b2:	b0 0d       	add	r27, r0
 9b4:	e1 1d       	adc	r30, r1
 9b6:	f9 1f       	adc	r31, r25
 9b8:	bd 01       	movw	r22, r26
 9ba:	cf 01       	movw	r24, r30
 9bc:	11 24       	eor	r1, r1
 9be:	08 95       	ret

000009c0 <__udivmodqi4>:
 9c0:	99 1b       	sub	r25, r25
 9c2:	79 e0       	ldi	r23, 0x09	; 9
 9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__udivmodqi4_ep>

000009c6 <__udivmodqi4_loop>:
 9c6:	99 1f       	adc	r25, r25
 9c8:	96 17       	cp	r25, r22
 9ca:	08 f0       	brcs	.+2      	; 0x9ce <__udivmodqi4_ep>
 9cc:	96 1b       	sub	r25, r22

000009ce <__udivmodqi4_ep>:
 9ce:	88 1f       	adc	r24, r24
 9d0:	7a 95       	dec	r23
 9d2:	c9 f7       	brne	.-14     	; 0x9c6 <__udivmodqi4_loop>
 9d4:	80 95       	com	r24
 9d6:	08 95       	ret

000009d8 <__udivmodhi4>:
 9d8:	aa 1b       	sub	r26, r26
 9da:	bb 1b       	sub	r27, r27
 9dc:	51 e1       	ldi	r21, 0x11	; 17
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <__udivmodhi4_ep>

000009e0 <__udivmodhi4_loop>:
 9e0:	aa 1f       	adc	r26, r26
 9e2:	bb 1f       	adc	r27, r27
 9e4:	a6 17       	cp	r26, r22
 9e6:	b7 07       	cpc	r27, r23
 9e8:	10 f0       	brcs	.+4      	; 0x9ee <__udivmodhi4_ep>
 9ea:	a6 1b       	sub	r26, r22
 9ec:	b7 0b       	sbc	r27, r23

000009ee <__udivmodhi4_ep>:
 9ee:	88 1f       	adc	r24, r24
 9f0:	99 1f       	adc	r25, r25
 9f2:	5a 95       	dec	r21
 9f4:	a9 f7       	brne	.-22     	; 0x9e0 <__udivmodhi4_loop>
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	bc 01       	movw	r22, r24
 9fc:	cd 01       	movw	r24, r26
 9fe:	08 95       	ret

00000a00 <__udivmodsi4>:
 a00:	a1 e2       	ldi	r26, 0x21	; 33
 a02:	1a 2e       	mov	r1, r26
 a04:	aa 1b       	sub	r26, r26
 a06:	bb 1b       	sub	r27, r27
 a08:	fd 01       	movw	r30, r26
 a0a:	0d c0       	rjmp	.+26     	; 0xa26 <__udivmodsi4_ep>

00000a0c <__udivmodsi4_loop>:
 a0c:	aa 1f       	adc	r26, r26
 a0e:	bb 1f       	adc	r27, r27
 a10:	ee 1f       	adc	r30, r30
 a12:	ff 1f       	adc	r31, r31
 a14:	a2 17       	cp	r26, r18
 a16:	b3 07       	cpc	r27, r19
 a18:	e4 07       	cpc	r30, r20
 a1a:	f5 07       	cpc	r31, r21
 a1c:	20 f0       	brcs	.+8      	; 0xa26 <__udivmodsi4_ep>
 a1e:	a2 1b       	sub	r26, r18
 a20:	b3 0b       	sbc	r27, r19
 a22:	e4 0b       	sbc	r30, r20
 a24:	f5 0b       	sbc	r31, r21

00000a26 <__udivmodsi4_ep>:
 a26:	66 1f       	adc	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	88 1f       	adc	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	1a 94       	dec	r1
 a30:	69 f7       	brne	.-38     	; 0xa0c <__udivmodsi4_loop>
 a32:	60 95       	com	r22
 a34:	70 95       	com	r23
 a36:	80 95       	com	r24
 a38:	90 95       	com	r25
 a3a:	9b 01       	movw	r18, r22
 a3c:	ac 01       	movw	r20, r24
 a3e:	bd 01       	movw	r22, r26
 a40:	cf 01       	movw	r24, r30
 a42:	08 95       	ret

00000a44 <malloc>:
 a44:	cf 93       	push	r28
 a46:	df 93       	push	r29
 a48:	82 30       	cpi	r24, 0x02	; 2
 a4a:	91 05       	cpc	r25, r1
 a4c:	10 f4       	brcc	.+4      	; 0xa52 <malloc+0xe>
 a4e:	82 e0       	ldi	r24, 0x02	; 2
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	e0 91 17 01 	lds	r30, 0x0117
 a56:	f0 91 18 01 	lds	r31, 0x0118
 a5a:	40 e0       	ldi	r20, 0x00	; 0
 a5c:	50 e0       	ldi	r21, 0x00	; 0
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	26 c0       	rjmp	.+76     	; 0xab0 <malloc+0x6c>
 a64:	60 81       	ld	r22, Z
 a66:	71 81       	ldd	r23, Z+1	; 0x01
 a68:	68 17       	cp	r22, r24
 a6a:	79 07       	cpc	r23, r25
 a6c:	e0 f0       	brcs	.+56     	; 0xaa6 <malloc+0x62>
 a6e:	68 17       	cp	r22, r24
 a70:	79 07       	cpc	r23, r25
 a72:	81 f4       	brne	.+32     	; 0xa94 <malloc+0x50>
 a74:	82 81       	ldd	r24, Z+2	; 0x02
 a76:	93 81       	ldd	r25, Z+3	; 0x03
 a78:	21 15       	cp	r18, r1
 a7a:	31 05       	cpc	r19, r1
 a7c:	31 f0       	breq	.+12     	; 0xa8a <malloc+0x46>
 a7e:	d9 01       	movw	r26, r18
 a80:	13 96       	adiw	r26, 0x03	; 3
 a82:	9c 93       	st	X, r25
 a84:	8e 93       	st	-X, r24
 a86:	12 97       	sbiw	r26, 0x02	; 2
 a88:	2b c0       	rjmp	.+86     	; 0xae0 <malloc+0x9c>
 a8a:	90 93 18 01 	sts	0x0118, r25
 a8e:	80 93 17 01 	sts	0x0117, r24
 a92:	26 c0       	rjmp	.+76     	; 0xae0 <malloc+0x9c>
 a94:	41 15       	cp	r20, r1
 a96:	51 05       	cpc	r21, r1
 a98:	19 f0       	breq	.+6      	; 0xaa0 <malloc+0x5c>
 a9a:	64 17       	cp	r22, r20
 a9c:	75 07       	cpc	r23, r21
 a9e:	18 f4       	brcc	.+6      	; 0xaa6 <malloc+0x62>
 aa0:	ab 01       	movw	r20, r22
 aa2:	e9 01       	movw	r28, r18
 aa4:	df 01       	movw	r26, r30
 aa6:	9f 01       	movw	r18, r30
 aa8:	72 81       	ldd	r23, Z+2	; 0x02
 aaa:	63 81       	ldd	r22, Z+3	; 0x03
 aac:	e7 2f       	mov	r30, r23
 aae:	f6 2f       	mov	r31, r22
 ab0:	30 97       	sbiw	r30, 0x00	; 0
 ab2:	c1 f6       	brne	.-80     	; 0xa64 <malloc+0x20>
 ab4:	41 15       	cp	r20, r1
 ab6:	51 05       	cpc	r21, r1
 ab8:	01 f1       	breq	.+64     	; 0xafa <malloc+0xb6>
 aba:	48 1b       	sub	r20, r24
 abc:	59 0b       	sbc	r21, r25
 abe:	44 30       	cpi	r20, 0x04	; 4
 ac0:	51 05       	cpc	r21, r1
 ac2:	80 f4       	brcc	.+32     	; 0xae4 <malloc+0xa0>
 ac4:	12 96       	adiw	r26, 0x02	; 2
 ac6:	8d 91       	ld	r24, X+
 ac8:	9c 91       	ld	r25, X
 aca:	13 97       	sbiw	r26, 0x03	; 3
 acc:	20 97       	sbiw	r28, 0x00	; 0
 ace:	19 f0       	breq	.+6      	; 0xad6 <malloc+0x92>
 ad0:	9b 83       	std	Y+3, r25	; 0x03
 ad2:	8a 83       	std	Y+2, r24	; 0x02
 ad4:	04 c0       	rjmp	.+8      	; 0xade <malloc+0x9a>
 ad6:	90 93 18 01 	sts	0x0118, r25
 ada:	80 93 17 01 	sts	0x0117, r24
 ade:	fd 01       	movw	r30, r26
 ae0:	32 96       	adiw	r30, 0x02	; 2
 ae2:	46 c0       	rjmp	.+140    	; 0xb70 <malloc+0x12c>
 ae4:	fd 01       	movw	r30, r26
 ae6:	e4 0f       	add	r30, r20
 ae8:	f5 1f       	adc	r31, r21
 aea:	81 93       	st	Z+, r24
 aec:	91 93       	st	Z+, r25
 aee:	42 50       	subi	r20, 0x02	; 2
 af0:	50 40       	sbci	r21, 0x00	; 0
 af2:	11 96       	adiw	r26, 0x01	; 1
 af4:	5c 93       	st	X, r21
 af6:	4e 93       	st	-X, r20
 af8:	3b c0       	rjmp	.+118    	; 0xb70 <malloc+0x12c>
 afa:	20 91 15 01 	lds	r18, 0x0115
 afe:	30 91 16 01 	lds	r19, 0x0116
 b02:	21 15       	cp	r18, r1
 b04:	31 05       	cpc	r19, r1
 b06:	41 f4       	brne	.+16     	; 0xb18 <malloc+0xd4>
 b08:	20 91 07 01 	lds	r18, 0x0107
 b0c:	30 91 08 01 	lds	r19, 0x0108
 b10:	30 93 16 01 	sts	0x0116, r19
 b14:	20 93 15 01 	sts	0x0115, r18
 b18:	20 91 09 01 	lds	r18, 0x0109
 b1c:	30 91 0a 01 	lds	r19, 0x010A
 b20:	21 15       	cp	r18, r1
 b22:	31 05       	cpc	r19, r1
 b24:	41 f4       	brne	.+16     	; 0xb36 <malloc+0xf2>
 b26:	2d b7       	in	r18, 0x3d	; 61
 b28:	3e b7       	in	r19, 0x3e	; 62
 b2a:	40 91 05 01 	lds	r20, 0x0105
 b2e:	50 91 06 01 	lds	r21, 0x0106
 b32:	24 1b       	sub	r18, r20
 b34:	35 0b       	sbc	r19, r21
 b36:	e0 91 15 01 	lds	r30, 0x0115
 b3a:	f0 91 16 01 	lds	r31, 0x0116
 b3e:	e2 17       	cp	r30, r18
 b40:	f3 07       	cpc	r31, r19
 b42:	a0 f4       	brcc	.+40     	; 0xb6c <malloc+0x128>
 b44:	2e 1b       	sub	r18, r30
 b46:	3f 0b       	sbc	r19, r31
 b48:	28 17       	cp	r18, r24
 b4a:	39 07       	cpc	r19, r25
 b4c:	78 f0       	brcs	.+30     	; 0xb6c <malloc+0x128>
 b4e:	ac 01       	movw	r20, r24
 b50:	4e 5f       	subi	r20, 0xFE	; 254
 b52:	5f 4f       	sbci	r21, 0xFF	; 255
 b54:	24 17       	cp	r18, r20
 b56:	35 07       	cpc	r19, r21
 b58:	48 f0       	brcs	.+18     	; 0xb6c <malloc+0x128>
 b5a:	4e 0f       	add	r20, r30
 b5c:	5f 1f       	adc	r21, r31
 b5e:	50 93 16 01 	sts	0x0116, r21
 b62:	40 93 15 01 	sts	0x0115, r20
 b66:	81 93       	st	Z+, r24
 b68:	91 93       	st	Z+, r25
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <malloc+0x12c>
 b6c:	e0 e0       	ldi	r30, 0x00	; 0
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	cf 01       	movw	r24, r30
 b72:	df 91       	pop	r29
 b74:	cf 91       	pop	r28
 b76:	08 95       	ret

00000b78 <free>:
 b78:	cf 93       	push	r28
 b7a:	df 93       	push	r29
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	09 f4       	brne	.+2      	; 0xb82 <free+0xa>
 b80:	91 c0       	rjmp	.+290    	; 0xca4 <free+0x12c>
 b82:	fc 01       	movw	r30, r24
 b84:	32 97       	sbiw	r30, 0x02	; 2
 b86:	13 82       	std	Z+3, r1	; 0x03
 b88:	12 82       	std	Z+2, r1	; 0x02
 b8a:	60 91 17 01 	lds	r22, 0x0117
 b8e:	70 91 18 01 	lds	r23, 0x0118
 b92:	61 15       	cp	r22, r1
 b94:	71 05       	cpc	r23, r1
 b96:	81 f4       	brne	.+32     	; 0xbb8 <free+0x40>
 b98:	20 81       	ld	r18, Z
 b9a:	31 81       	ldd	r19, Z+1	; 0x01
 b9c:	28 0f       	add	r18, r24
 b9e:	39 1f       	adc	r19, r25
 ba0:	80 91 15 01 	lds	r24, 0x0115
 ba4:	90 91 16 01 	lds	r25, 0x0116
 ba8:	82 17       	cp	r24, r18
 baa:	93 07       	cpc	r25, r19
 bac:	99 f5       	brne	.+102    	; 0xc14 <free+0x9c>
 bae:	f0 93 16 01 	sts	0x0116, r31
 bb2:	e0 93 15 01 	sts	0x0115, r30
 bb6:	76 c0       	rjmp	.+236    	; 0xca4 <free+0x12c>
 bb8:	db 01       	movw	r26, r22
 bba:	80 e0       	ldi	r24, 0x00	; 0
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <free+0x4c>
 bc0:	cd 01       	movw	r24, r26
 bc2:	d9 01       	movw	r26, r18
 bc4:	ae 17       	cp	r26, r30
 bc6:	bf 07       	cpc	r27, r31
 bc8:	48 f4       	brcc	.+18     	; 0xbdc <free+0x64>
 bca:	12 96       	adiw	r26, 0x02	; 2
 bcc:	2d 91       	ld	r18, X+
 bce:	3c 91       	ld	r19, X
 bd0:	13 97       	sbiw	r26, 0x03	; 3
 bd2:	21 15       	cp	r18, r1
 bd4:	31 05       	cpc	r19, r1
 bd6:	a1 f7       	brne	.-24     	; 0xbc0 <free+0x48>
 bd8:	cd 01       	movw	r24, r26
 bda:	21 c0       	rjmp	.+66     	; 0xc1e <free+0xa6>
 bdc:	b3 83       	std	Z+3, r27	; 0x03
 bde:	a2 83       	std	Z+2, r26	; 0x02
 be0:	ef 01       	movw	r28, r30
 be2:	49 91       	ld	r20, Y+
 be4:	59 91       	ld	r21, Y+
 be6:	9e 01       	movw	r18, r28
 be8:	24 0f       	add	r18, r20
 bea:	35 1f       	adc	r19, r21
 bec:	a2 17       	cp	r26, r18
 bee:	b3 07       	cpc	r27, r19
 bf0:	79 f4       	brne	.+30     	; 0xc10 <free+0x98>
 bf2:	2d 91       	ld	r18, X+
 bf4:	3c 91       	ld	r19, X
 bf6:	11 97       	sbiw	r26, 0x01	; 1
 bf8:	24 0f       	add	r18, r20
 bfa:	35 1f       	adc	r19, r21
 bfc:	2e 5f       	subi	r18, 0xFE	; 254
 bfe:	3f 4f       	sbci	r19, 0xFF	; 255
 c00:	31 83       	std	Z+1, r19	; 0x01
 c02:	20 83       	st	Z, r18
 c04:	12 96       	adiw	r26, 0x02	; 2
 c06:	2d 91       	ld	r18, X+
 c08:	3c 91       	ld	r19, X
 c0a:	13 97       	sbiw	r26, 0x03	; 3
 c0c:	33 83       	std	Z+3, r19	; 0x03
 c0e:	22 83       	std	Z+2, r18	; 0x02
 c10:	00 97       	sbiw	r24, 0x00	; 0
 c12:	29 f4       	brne	.+10     	; 0xc1e <free+0xa6>
 c14:	f0 93 18 01 	sts	0x0118, r31
 c18:	e0 93 17 01 	sts	0x0117, r30
 c1c:	43 c0       	rjmp	.+134    	; 0xca4 <free+0x12c>
 c1e:	dc 01       	movw	r26, r24
 c20:	13 96       	adiw	r26, 0x03	; 3
 c22:	fc 93       	st	X, r31
 c24:	ee 93       	st	-X, r30
 c26:	12 97       	sbiw	r26, 0x02	; 2
 c28:	4d 91       	ld	r20, X+
 c2a:	5d 91       	ld	r21, X+
 c2c:	a4 0f       	add	r26, r20
 c2e:	b5 1f       	adc	r27, r21
 c30:	ea 17       	cp	r30, r26
 c32:	fb 07       	cpc	r31, r27
 c34:	69 f4       	brne	.+26     	; 0xc50 <free+0xd8>
 c36:	20 81       	ld	r18, Z
 c38:	31 81       	ldd	r19, Z+1	; 0x01
 c3a:	24 0f       	add	r18, r20
 c3c:	35 1f       	adc	r19, r21
 c3e:	2e 5f       	subi	r18, 0xFE	; 254
 c40:	3f 4f       	sbci	r19, 0xFF	; 255
 c42:	ec 01       	movw	r28, r24
 c44:	39 83       	std	Y+1, r19	; 0x01
 c46:	28 83       	st	Y, r18
 c48:	22 81       	ldd	r18, Z+2	; 0x02
 c4a:	33 81       	ldd	r19, Z+3	; 0x03
 c4c:	3b 83       	std	Y+3, r19	; 0x03
 c4e:	2a 83       	std	Y+2, r18	; 0x02
 c50:	e0 e0       	ldi	r30, 0x00	; 0
 c52:	f0 e0       	ldi	r31, 0x00	; 0
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <free+0xe2>
 c56:	fb 01       	movw	r30, r22
 c58:	bc 01       	movw	r22, r24
 c5a:	db 01       	movw	r26, r22
 c5c:	12 96       	adiw	r26, 0x02	; 2
 c5e:	8d 91       	ld	r24, X+
 c60:	9c 91       	ld	r25, X
 c62:	13 97       	sbiw	r26, 0x03	; 3
 c64:	00 97       	sbiw	r24, 0x00	; 0
 c66:	b9 f7       	brne	.-18     	; 0xc56 <free+0xde>
 c68:	9b 01       	movw	r18, r22
 c6a:	2e 5f       	subi	r18, 0xFE	; 254
 c6c:	3f 4f       	sbci	r19, 0xFF	; 255
 c6e:	8d 91       	ld	r24, X+
 c70:	9c 91       	ld	r25, X
 c72:	11 97       	sbiw	r26, 0x01	; 1
 c74:	82 0f       	add	r24, r18
 c76:	93 1f       	adc	r25, r19
 c78:	40 91 15 01 	lds	r20, 0x0115
 c7c:	50 91 16 01 	lds	r21, 0x0116
 c80:	48 17       	cp	r20, r24
 c82:	59 07       	cpc	r21, r25
 c84:	79 f4       	brne	.+30     	; 0xca4 <free+0x12c>
 c86:	30 97       	sbiw	r30, 0x00	; 0
 c88:	29 f4       	brne	.+10     	; 0xc94 <free+0x11c>
 c8a:	10 92 18 01 	sts	0x0118, r1
 c8e:	10 92 17 01 	sts	0x0117, r1
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <free+0x120>
 c94:	13 82       	std	Z+3, r1	; 0x03
 c96:	12 82       	std	Z+2, r1	; 0x02
 c98:	22 50       	subi	r18, 0x02	; 2
 c9a:	30 40       	sbci	r19, 0x00	; 0
 c9c:	30 93 16 01 	sts	0x0116, r19
 ca0:	20 93 15 01 	sts	0x0115, r18
 ca4:	df 91       	pop	r29
 ca6:	cf 91       	pop	r28
 ca8:	08 95       	ret

00000caa <memset>:
 caa:	dc 01       	movw	r26, r24
 cac:	01 c0       	rjmp	.+2      	; 0xcb0 <memset+0x6>
 cae:	6d 93       	st	X+, r22
 cb0:	41 50       	subi	r20, 0x01	; 1
 cb2:	50 40       	sbci	r21, 0x00	; 0
 cb4:	e0 f7       	brcc	.-8      	; 0xcae <memset+0x4>
 cb6:	08 95       	ret

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>
